(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/emitter'), require('@pluginjs/global-plugin'), require('@pluginjs/i18n'), require('@pluginjs/is'), require('@pluginjs/utils'), require('@pluginjs/events')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/emitter', '@pluginjs/global-plugin', '@pluginjs/i18n', '@pluginjs/is', '@pluginjs/utils', '@pluginjs/events'], factory) :
  (factory((global['@pluginjs/pluginjs'] = {}),global['@pluginjs/emitter'],global['@pluginjs/global-plugin'],global['@pluginjs/i18n'],global['@pluginjs/is'],global['@pluginjs/utils'],global['@pluginjs/events']));
}(this, (function (exports,Emitter,GlobalComponent,I18N,is,utils,events) { 'use strict';

  Emitter = Emitter && Emitter.hasOwnProperty('default') ? Emitter['default'] : Emitter;
  GlobalComponent = GlobalComponent && GlobalComponent.hasOwnProperty('default') ? GlobalComponent['default'] : GlobalComponent;
  I18N = I18N && I18N.hasOwnProperty('default') ? I18N['default'] : I18N;
  is = is && is.hasOwnProperty('default') ? is['default'] : is;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  // import './polyfills'

  var envParamters = {
    body: window.document.body,
    doc: window.document
  };

  if (!window.Pj) {
    window.Pj = _extends({}, envParamters, {
      emitter: new Emitter(),
      plugins: {},
      instances: {},
      get windowWidth() {
        return window.document.documentElement.clientWidth;
      },
      get windowHeight() {
        return window.document.documentElement.clientHeight;
      },
      get: function get$$1(name) {
        if (typeof this.plugins[name] !== 'undefined') {
          return this.plugins[name];
        }
        return null;
      }
    });
  }

  var Pj = window.Pj;

  function globalResizeHandle() {
    Pj.emitter.emit('resize');
  }

  function globalScrollHanle() {
    Pj.emitter.emit('scroll');
  }

  function register(name) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var info = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return function (plugin) {
      var _obj$defaults = obj.defaults,
          options = _obj$defaults === undefined ? {} : _obj$defaults,
          _obj$methods = obj.methods,
          methods = _obj$methods === undefined ? [] : _obj$methods,
          _obj$dependencies = obj.dependencies,
          dependencies = _obj$dependencies === undefined ? {} : _obj$dependencies,
          others = objectWithoutProperties(obj, ['defaults', 'methods', 'dependencies']);


      Pj.instances[name] = [];

      Pj.plugins[name] = Object.assign(plugin, _extends({
        setDefaults: function setDefaults() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          plugin.defaults = utils.deepMerge(plugin.defaults, options);
        },

        defaults: plugin.defaults ? utils.deepMerge(plugin.defaults, options) : options,
        methods: plugin.methods ? utils.deepMerge(plugin.methods, methods) : methods,
        dependencies: plugin.dependencies ? utils.deepMerge(plugin.dependencies, dependencies) : dependencies
      }, others), info);

      if (plugin.prototype.resize && is.undefined(plugin.resize)) {
        plugin.resize = function () {
          var instances = Pj.instances[name];

          for (var i = 0; i < instances.length; i++) {
            instances[i].resize(Pj.windowWidth, Pj.windowHeight);
          }
        };
      }

      if (is.function(plugin.resize)) {
        Pj.emitter.on('resize', plugin.resize);
      }

      if (plugin.prototype instanceof GlobalComponent) {
        Pj[name] = plugin;
      } else {
        var elementParse = function elementParse(selector) {
          if (typeof selector === 'string') {
            return Array.from(document.querySelectorAll(selector));
          }
          if (selector instanceof NodeList || selector instanceof HTMLCollection) {
            return Array.from(selector);
          }
          return Array.of(selector);
        };
        Pj[name] = function (selector, options) {
          var elements = elementParse(selector);
          if (!elements.length) {
            throw new Error('element is not exists:');
          }
          var instances = elements.map(function (el) {
            return plugin.of(el, options);
          });
          if (instances.length === 1) {
            return instances[0];
          }
          return instances;
        };
        Object.setPrototypeOf(Pj[name], plugin);
      }
      return plugin;
    };
  }

  function stateable() {
    return function (plugin) {
      plugin.prototype.initStates = function () {
        var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this._states = states;
      };

      // Checks whether the plugin is in a specific state or not.
      plugin.prototype.is = function (state) {
        if (this._states[state] && this._states[state] > 0) {
          return true;
        }
        return false;
      };

      // Enters a state.
      plugin.prototype.enter = function (state) {
        if (this._states[state] === undefined) {
          this._states[state] = 0;
        }

        // this._states[state]++;
        this._states[state] = 1;
      };

      // Leaves a state.
      plugin.prototype.leave = function (state) {
        if (this._states[state] === undefined) {
          this._states[state] = 0;
        }

        // this._states[state]--;
        this._states[state] = 0;
      };
    };
  }

  function eventable() {
    var events$$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return function (plugin) {
      plugin.events = events$$1;

      plugin.setEvents = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        utils.deepMerge(plugin.events, options);
      };

      plugin.prototype.eventName = function (events$$1) {
        if (typeof events$$1 !== 'string' || events$$1 === '') {
          return '.' + this.plugin;
        }
        events$$1 = events$$1.split(' ');

        var length = events$$1.length;
        for (var i = 0; i < length; i++) {
          events$$1[i] = events$$1[i] + '.' + this.plugin;
        }
        return events$$1.join(' ');
      };

      plugin.prototype.eventNameWithId = function (events$$1) {
        if (typeof events$$1 !== 'string' || events$$1 === '') {
          return '.' + this.plugin + '-' + this.instanceId;
        }

        events$$1 = events$$1.split(' ');

        var length = events$$1.length;
        for (var i = 0; i < length; i++) {
          events$$1[i] = events$$1[i] + '.' + this.plugin + '-' + this.instanceId;
        }
        return events$$1.join(' ');
      };

      plugin.prototype.trigger = function (eventType) {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        if (eventType instanceof Event) {
          events.trigger(eventType, this.element);
          var type = utils.camelize(eventType.type);
          var onFunction = 'on' + type;

          if (typeof this.options[onFunction] === 'function') {
            this.options[onFunction].apply(this, params);
          }
        } else {
          events.trigger({
            type: this.plugin + ':' + eventType,
            data: { instance: this, data: params }
          }, this.element);
          eventType = utils.camelize(eventType);
          var _onFunction = 'on' + eventType;
          if (typeof this.options[_onFunction] === 'function') {
            this.options[_onFunction].apply(this, [].concat(params, [this]));
          }
        }
      };

      plugin.prototype.selfEventName = function (eventType) {
        return this.plugin + ':' + eventType;
      };
    };
  }

  function themeable() {
    return function (plugin) {
      plugin.prototype.getThemeClass = function (themes, THEME) {
        if (is.undefined(themes) && this.options.theme) {
          return this.getThemeClass(this.options.theme);
        }
        if (is.string(themes)) {
          if (is.undefined(THEME)) {
            THEME = this.classes.THEME;
          }
          themes = themes.split(' ');

          if (THEME) {
            for (var i = 0; i < themes.length; i++) {
              themes[i] = THEME.replace('{theme}', themes[i]);
            }
          } else {
            for (var _i = 0; _i < themes.length; _i++) {
              themes[_i] = this.getClass(themes[_i]);
            }
          }
          return themes.join(' ');
        }

        return '';
      };
    };
  }

  function styleable() {
    var classes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return function (plugin) {
      plugin.classes = classes;
      plugin.setClasses = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        utils.deepMerge(plugin.classes, options);
      };

      plugin.prototype.getClass = function (classname, arg, value) {
        if (!is.undefined(arg)) {
          return this.getClass(classname.replace('{' + arg + '}', value));
        }
        return classname.replace('{namespace}', this.classes.NAMESPACE || '');
      };

      plugin.prototype.initClasses = function (defaults$$1, options) {
        var _this = this;

        if (is.undefined(options) && is.object(this.options.classes)) {
          options = this.options.classes;
        }

        function conventKeyToUpperCase(obj) {
          var upperObj = {};
          for (var name in obj) {
            if (Object.hasOwnProperty.call(obj, name)) {
              if (is.string(obj[name])) {
                upperObj[name.toUpperCase()] = obj[name];
              } else if (is.object(obj[name])) {
                upperObj[name.toUpperCase()] = conventKeyToUpperCase(obj[name]);
              }
            }
          }
          return upperObj;
        }

        this.classes = utils.deepMerge({}, defaults$$1, conventKeyToUpperCase(options || {}));

        if (!is.undefined(this.classes.NAMESPACE)) {
          var injectNamespace = function injectNamespace(obj) {
            for (var name in obj) {
              if (Object.hasOwnProperty.call(obj, name)) {
                if (is.string(obj[name])) {
                  obj[name] = _this.getClass(obj[name]);
                } else if (is.object(obj[name])) {
                  obj[name] = injectNamespace(obj[name]);
                }
              }
            }
            return obj;
          };

          this.classes = injectNamespace(this.classes);
        }
      };
    };
  }

  function translateable(translations) {
    return function (plugin) {
      window.deepMerge = utils.deepMerge;
      plugin.I18N = new I18N({
        locale: plugin.defaults.locale,
        fallbacks: plugin.defaults.localeFallbacks
      }, translations);
      Object.assign(plugin.prototype, {
        setupI18n: function setupI18n() {
          this.i18n = plugin.I18N.instance({
            locale: this.options.locale,
            fallbacks: this.options.localeFallbacks
          });
        },
        translate: function translate(key, args) {
          return this.i18n.translate(key, args);
        },
        setLocale: function setLocale(locale) {
          return this.i18n.setLocale(locale);
        },
        getLocale: function getLocale() {
          return this.i18n.getLocale();
        }
      });
    };
  }

  window.addEventListener('orientationchange', globalResizeHandle);
  window.addEventListener('resize', utils.throttle(globalResizeHandle));
  window.addEventListener('scroll', utils.throttle(globalScrollHanle));

  exports.register = register;
  exports.stateable = stateable;
  exports.eventable = eventable;
  exports.themeable = themeable;
  exports.styleable = styleable;
  exports.translateable = translateable;
  exports.default = Pj;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
