(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/template'] = {})));
}(this, (function (exports) { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /* Credit to https://github.com/jonschlinkert/get-value MIT */
  function getValueByPath(obj, path) {
    if (Object(obj) !== obj || typeof path === 'undefined') {
      return obj;
    }

    if (path in obj) {
      return obj[path];
    }

    var segs = path.split('.');
    var length = segs.length;
    if (!length) {
      return undefined;
    }
    var i = -1;

    while (obj && ++i < length) {
      var key = segs[i];
      while (key[key.length - 1] === '\\') {
        key = key.slice(0, -1) + '.' + segs[++i];
      }
      obj = obj[key];
    }
    return obj;
  }

  /* Credit to https://github.com/Matt-Esch/string-template MIT */
  var template = function () {
    var pattern = /\{\s*([.0-9a-zA-Z_]+)\s*\}/g;

    function render(string) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (args.length === 1 && _typeof(args[0]) === 'object') {
        args = args[0];
      }

      if (!args || !args.hasOwnProperty) {
        args = {};
      }

      return string.replace(pattern, function (match, i, index) {
        var result = null;

        if (string[index - 1] === '{' && string[index + match.length] === '}') {
          return i;
        }

        if (args.hasOwnProperty(i)) {
          result = args[i];
        } else if (i.indexOf('.') !== -1) {
          result = getValueByPath(args, i);
        }

        if (result === null || result === undefined) {
          return '';
        }

        return result;
      });
    }

    return {
      render: render,
      compile: function compile(str) {
        return function () {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return render.apply(undefined, [str].concat(args));
        };
      },
      parse: function parse(str) {
        var matches = str.match(pattern);

        if (matches === null) {
          return false;
        }

        var parsed = [];
        for (var i = 0; i < matches.length; i++) {
          if (!matches[i].match(/^\{\{.+\}\}$/g)) {
            parsed.push(matches[i].substring(1, matches[i].length - 1).trim());
          }
        }

        return parsed;
      }
    };
  }();

  exports.default = template;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
