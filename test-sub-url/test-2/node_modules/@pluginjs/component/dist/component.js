(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/component'] = {})));
}(this, (function (exports) { 'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  function datasetParse(dataset) {
    var data = Object.entries(dataset).reduce(function (result, _ref) {
      var _ref2 = slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];

      try {
        var content = JSON.parse('{"data": ' + v.replace(/'/g, '"') + '}').data;
        return _extends({}, result, defineProperty({}, k, content));
      } catch (err) {
        return _extends({}, result, defineProperty({}, k, v));
      }
    }, {});
    return data;
  }

  var Plugin = function () {
    function Plugin(namespace, element) {
      var _this = this;

      classCallCheck(this, Plugin);

      this.plugin = namespace;
      this.element = element;
      if (!window.Pj) {
        throw new Error('Pluginjs must be required!');
      }
      if (window.Pj && window.Pj.instances[this.plugin]) {
        if (window.Pj.instances[this.plugin].find(function (instance) {
          return instance.element === _this.element;
        })) {
          throw new Error(this.plugin + ' has been installed on this element.\n\nElement: ' + this.element.outerHTML + '\n');
        }
        window.Pj.instances[this.plugin].push(this);
      }
    }

    createClass(Plugin, [{
      key: 'getDataOptions',
      value: function getDataOptions() {
        return datasetParse(this.element.dataset);
        // const data = this.element.dataset
        // const length = Object.keys(data).length
        // const newData = {}

        // if (length > 0) {
        //   Object.entries(data).forEach(([name, content]) => {
        //     let cache = {}
        //     const items = name.split('-')
        //     // let items = name.split('-');

        //     const deep = items.length

        //     if (deep > 1) {
        //       let buffer = {}

        //       for (let j = 0; j < deep; j++) {
        //         const item =
        //           items[j].substring(0, 1).toLowerCase() + items[j].substring(1)

        //         if (j === 0) {
        //           buffer = {}
        //           cache[item] = {}
        //         } else if (j === deep - 1) {
        //           buffer[item] = content
        //         } else {
        //           buffer = {}
        //           buffer[item] = {}
        //         }
        //       }
        //     } else if (
        //       items[0] ===
        //       `as${this.plugin
        //         .substring(0, 1)
        //         .toUpperCase()}${this.plugin.substring(1)}`
        //     ) {
        //       cache = content
        //     } else {
        //       cache[name] = content
        //     }

        //     Object.assign(newData, cache)
        //   })
        // }

        // return newData
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        var _this2 = this;

        this.plugin = null;
        this.element = null;
        if (window.Pj && window.Pj.instances[this.plugin]) {
          window.Pj.instances[this.plugin] = window.Pj.instances[this.plugin].filter(function (plugin) {
            return plugin.element === _this2.element;
          });
        }
      }
    }], [{
      key: 'of',
      value: function of() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new (Function.prototype.bind.apply(this, [null].concat(args)))();
      }
    }]);
    return Plugin;
  }();

  exports.default = Plugin;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
