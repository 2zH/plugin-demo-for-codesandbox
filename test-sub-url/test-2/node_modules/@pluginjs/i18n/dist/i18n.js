(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/utils'), require('@pluginjs/template')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/utils', '@pluginjs/template'], factory) :
  (factory((global['@pluginjs/i18n'] = {}),global['@pluginjs/utils'],global['@pluginjs/template']));
}(this, (function (exports,utils,template) { 'use strict';

  template = template && template.hasOwnProperty('default') ? template['default'] : template;

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var I18N = function () {
    function I18N(defaults$$1, translations) {
      classCallCheck(this, I18N);

      this.defaults = utils.deepMerge(I18N.defaults, defaults$$1);
      this.translations = translations ? translations : {};
    }

    createClass(I18N, [{
      key: 'hasTranslation',
      value: function hasTranslation(locale) {
        return locale in this.translations;
      }
    }, {
      key: 'addTranslation',
      value: function addTranslation(locale, translation) {
        if (this.translations[locale]) {
          Object.assign(this.translations[locale], translation);
        } else {
          this.translations[locale] = translation;
        }
      }
    }, {
      key: 'getTranslation',
      value: function getTranslation(locale) {
        if (this.translations[locale]) {
          return this.translations[locale];
        }
        return {};
      }
    }, {
      key: 'instance',
      value: function instance() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var that = this;

        var _options = utils.deepMerge(that.defaults, options);
        var _locale = _options.locale;
        function getMessage(key, locale) {
          var translation = that.getTranslation(locale);
          var message = utils.getValueByPath(translation, key);

          return message;
        }

        return {
          translate: function translate(key) {
            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _locale;

            var message = getMessage(key, locale);
            if (message === undefined && _options.fallbacks) {
              var locales = locale.split('-');
              if (locales.length > 1 && that.hasTranslation(locales[0])) {
                message = getMessage(key, locales[0]);
              }

              if (message === undefined) {
                var fallbackLocale = void 0;
                if (_options.fallbacks !== true && that.hasTranslation(_options.fallbacks)) {
                  fallbackLocale = _options.fallbacks;
                } else {
                  fallbackLocale = that.defaults.locale;
                }

                message = getMessage(key, fallbackLocale);
              }
            }

            if (Object.prototype.toString.call(message) === '[object Array]' && message.length >= 2) {
              if (typeof args._number === 'string') {
                if (typeof args[args._number] !== 'undefined') {
                  var _number = parseInt(args[args._number], 10);

                  if (_number === 1) {
                    message = message[0];
                  } else if (_number > 1) {
                    message = message[1];
                  } else if (_number === 0 && message.length >= 3) {
                    message = message[2];
                  }
                }
              }
            }

            if (typeof message === 'string') {
              var parsed = template.parse(message);
              if (!parsed) {
                return message;
              }
              var _key = void 0;
              for (var i = 0; i < parsed.length; i++) {
                _key = parsed[i];
                if (typeof args[_key] === 'undefined') {
                  args[_key] = _options.missingPlaceholder(_key);
                } else if (args[_key] === null) {
                  args[_key] = _options.nullPlaceholder(_key);
                }
              }
              return template.render(message, args);
            }

            if (Object(message) === message) {
              return message;
            }

            return '[missing "' + locale + '.' + key + '" translation]';
          },
          setLocale: function setLocale(locale) {
            _locale = locale;
          },
          getLocale: function getLocale() {
            return _locale;
          }
        };
      }
    }, {
      key: 'setTranslations',
      value: function setTranslations(translations) {
        this.translations = translations;
      }
    }]);
    return I18N;
  }();

  I18N.defaults = {
    locale: 'en',
    fallbacks: true,
    nullPlaceholder: function nullPlaceholder(key) {
      return '[missing {{' + key + '}} value]';
    },
    missingPlaceholder: function missingPlaceholder(key) {
      return '[missing {{' + key + '}} value]';
    }
  };

  exports.default = I18N;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
