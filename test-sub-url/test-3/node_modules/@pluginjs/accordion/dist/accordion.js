(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('animejs'), require('@pluginjs/styled'), require('@pluginjs/dom'), require('@pluginjs/classes'), require('hammerjs'), require('@pluginjs/component'), require('@pluginjs/events'), require('@pluginjs/pluginjs')) :
  typeof define === 'function' && define.amd ? define(['exports', 'animejs', '@pluginjs/styled', '@pluginjs/dom', '@pluginjs/classes', 'hammerjs', '@pluginjs/component', '@pluginjs/events', '@pluginjs/pluginjs'], factory) :
  (factory((global['@pluginjs/accordion'] = {}),global.anime,global['@pluginjs/styled'],global['@pluginjs/dom'],global['@pluginjs/classes'],global.Hammer,global['@pluginjs/component'],global['@pluginjs/events'],global['@pluginjs/pluginjs']));
}(this, (function (exports,anime,styled,dom,classes,Hammer,Component,events,Pj) { 'use strict';

  anime = anime && anime.hasOwnProperty('default') ? anime['default'] : anime;
  Hammer = Hammer && Hammer.hasOwnProperty('default') ? Hammer['default'] : Hammer;
  Component = Component && Component.hasOwnProperty('default') ? Component['default'] : Component;
  var Pj__default = 'default' in Pj ? Pj['default'] : Pj;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  var _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  function nub(arr) {
    return Array.from(new Set(arr));
  }
  function isPlainObject(data) {
    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
      return false;
    }

    if (data === null) {
      return false;
    }

    if (data instanceof Set || data instanceof Map) {
      return false;
    }

    if (Array.isArray(data)) {
      return false;
    }

    return true;
  }
  function deepMergeTwo(x, y) {
    if (isPlainObject(y) && isPlainObject(x) || isPlainObject(x) && Array.isArray(y)) {
      return fromPairs$1(nub(Object.keys(x).concat(Object.keys(y))).map(function (key) {
        return [key, deepMergeTwo(x[key], y[key])];
      }));
    }

    if (isPlainObject(y) && typeof x === 'function') {
      return Object.assign(function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return x.apply(this, args);
      }, y);
    }

    if (isPlainObject(y) && Array.isArray(x)) {
      return Object.assign([], x, y);
    }

    if (isPlainObject(x) && typeof y === 'function') {
      return Object.assign(function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return y.apply(this, args);
      }, x);
    }

    if (Array.isArray(y) && Array.isArray(x)) {
      // return x.concat(y)
      return nub(Object.keys(y).concat(Object.keys(x))).map(function (index) {
        return deepMergeTwo(x[index], y[index]);
      });
    }

    if (typeof y === 'undefined') {
      return x;
    }
    return y;
  }
  function isObject(obj) {
    return Object(obj) === obj;
  }
  function deepMerge() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return args.filter(isObject).reduce(deepMergeTwo);
  }

  var compose = function compose() {
    for (var _len6 = arguments.length, fn = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      fn[_key6] = arguments[_key6];
    }

    var callback = function callback() {
      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return fn.reduceRight(function (r, i, index) {
        if (Array.isArray(r) && index === fn.length - 1) {
          return i.apply(undefined, toConsumableArray(r));
        }
        return i(r);
      }, args);
    };
    callback.currylen = fn[fn.curylen || fn.length - 1].length;
    return callback;
  };

  function fromPairs$1(arr) {
    return arr.reduce(function (r, _ref10) {
      var _ref11 = slicedToArray(_ref10, 2),
          k = _ref11[0],
          v = _ref11[1];

      return _extends$1({}, r, defineProperty({}, k, v));
    }, {});
  }

  var namespace = 'accordion';

  var events$1 = {
    READY: 'ready',
    OPEN: 'open',
    CLOSE: 'close',
    RESIZE: 'resize'
  };

  var classes$1 = {
    NAMESPACE: 'pj-' + namespace,
    THEME: '{namespace}--{theme}',
    ACTIVE: '{namespace}-active',
    DISABLED: '{namespace}-disabled',

    RESPONSIVE: '{namespace}-responsive',
    HORIZONTAL: '{namespace}-horizontal',

    DROPDOWN: '{namespace}-dropdown',
    DROPDOWNLABEL: '{namespace}-dropdown-label',
    DROPDOWNLIST: '{namespace}-dropdown-list',
    DROPDOWNOPEN: '{namespace}-open',

    // components
    PANE: '{namespace}-pane',
    PANEHEADER: '{namespace}-pane-header',
    PANECONTENT: '{namespace}-pane-content',
    PANECONTENTINNER: '{namespace}-pane-content-inner'
  };

  var methods = ['open', 'close'];

  var defaults$1 = {
    theme: null,
    panelSelector: null,
    initialIndex: 0,
    duration: 300,
    horizontal: false,
    multiple: false,
    ajax: false,

    // Responsive
    breakWidth: null,
    resizeReference: 'window',
    responsiveEffect: 'easeInQuad',
    dropdownLabelTpl: '<a href="javascript:void(0)"></a>',
    responsiveDuration: 300,

    // callback
    onReady: null
  };

  var dependencies = ['Hammer', 'anime'];

  var info = { version: '0.2.1' };

  var Animate = function () {
    function Animate(instance) {
      classCallCheck(this, Animate);

      this.instance = instance;
      this.initialize();
    }

    createClass(Animate, [{
      key: 'initialize',
      value: function initialize() {
        var _this = this;

        this.horizontal = this.instance.options.horizontal;
        this.property = this.horizontal ? 'width' : 'height';
        this.initDistance();
        this.instance.$panes.map(styled.setStyle(defineProperty({}, this.property, this.headerDistance + 'px')));
        if (this.horizontal) {
          this.instance.$contentInners.map(styled.setStyle({ width: this.contentDistance[0] + 'px' }));
          this.instance.$contentInners.map(function (item, index) {
            return styled.setStyle({ width: _this.contentDistance[index] + 'px' }, item);
          });
        }
      }
    }, {
      key: 'initDistance',
      value: function initDistance() {
        if (this.horizontal) {
          this.getPaneSpace();
        }

        this.getHeaderDistance();
        this.getContentDistance();
      }
    }, {
      key: 'getPaneSpace',
      value: function getPaneSpace() {
        this.paneSpace = styled.outerWidthWithMargin(this.instance.$panes[1]) - styled.outerWidth(this.instance.$panes[1]);
        return this.paneSpace;
      }
    }, {
      key: 'getHeaderDistance',
      value: function getHeaderDistance() {
        this.headerDistance = styled.outerHeightWithMargin(this.instance.$headers[0]) + 2;
      }
    }, {
      key: 'getContentDistance',
      value: function getContentDistance() {
        var _this2 = this;

        var innerWidth = styled.contentWidth(this.instance.element);
        var size = this.instance.size;
        this.contentDistance = this.instance.$contentInners.map(function (element) {
          if (_this2.horizontal) {
            return innerWidth - size * _this2.headerDistance - (size - 1) * _this2.paneSpace;
          }
          return compose(styled.outerHeight, compose(dom.parentWith, classes.hasClass)(_this2.instance.classes.PANECONTENT))(element);
        });
        return this.contentDistance;
      }
    }, {
      key: 'resetWidth',
      value: function resetWidth() {
        var immediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (this.instance.is('built')) {
          return;
        }

        var current = this.instance.current;

        this.getContentDistance();

        if (this.horizontal) {
          this.instance.$contentInners.map(styled.setStyle({ width: this.contentDistance[0] + 'px' }));
        }

        for (var i = 0; i < current.length; i++) {
          var index = current[i];
          var pane = this.instance.$panes[index];
          var opts = {
            targets: pane,
            duration: immediately ? 1 : 200,
            easing: 'linear'
          };

          opts[this.property] = this.headerDistance + this.contentDistance[index];

          anime(opts);
        }
      }
    }, {
      key: 'open',
      value: function open(index, trigger) {
        var pane = this.instance.$panes[index];
        var opts = {
          targets: pane,
          duration: trigger ? 200 : 1,
          easing: 'linear'
        };

        opts[this.property] = this.headerDistance + this.contentDistance[index];

        anime(opts);
      }
    }, {
      key: 'close',
      value: function close(index, trigger) {
        var pane = this.instance.$panes[index];
        var opts = {
          targets: pane,
          duration: trigger ? 200 : 1,
          easing: 'linear'
        };

        opts[this.property] = this.headerDistance;

        anime(opts);
      }
    }]);
    return Animate;
  }();

  /*eslint-disable */
  /* Credit to http://is.js.org MIT */
  var toString = Object.prototype.toString;
  var is = {
    // Type checks
    /* -------------------------------------------------------------------------- */
    // is a given value Arguments?
    arguments: function _arguments(value) {
      // fallback check is for IE
      return toString.call(value) === '[object Arguments]' || value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'callee' in value;
    },

    // is a given value Array?
    array: function array(val) {
      if (Array.isArray) {
        return Array.isArray(val);
      }
      return toString.call(val) === '[object Array]';
    },

    // is a given value Boolean?
    boolean: function boolean(val) {
      return val === true || val === false || toString.call(val) === '[object Boolean]';
    },

    // is a given value Char?
    char: function char(val) {
      return this.string(val) && val.length === 1;
    },

    // is a given value Date Object?
    date: function date(value) {
      return toString.call(value) === '[object Date]';
    },

    // is a given object a DOM node?
    domNode: function domNode(object) {
      return this.object(object) && object.nodeType > 0;
    },

    // is a given value Error object?
    error: function error(val) {
      return toString.call(val) === '[object Error]';
    },

    // is a given value function?
    function: function _function(val) {
      // fallback check is for IE
      return toString.call(val) === '[object Function]' || typeof val === 'function';
    },

    // is given value a pure JSON object?
    json: function json(value) {
      return toString.call(value) === '[object Object]';
    },

    // is a given value NaN?
    nan: function nan(val) {
      // NaN is number :) Also it is the only value which does not equal itself
      return val !== val;
    },

    // is a given value null?
    null: function _null(val) {
      return val === null;
    },

    // is a given value number?
    number: function number(val) {
      return !this.nan(val) && toString.call(val) === '[object Number]';
    },

    // is a given value object?
    object: function object(val) {
      return Object(val) === val;
    },

    // is a given value empty object?
    emptyObject: function emptyObject(val) {
      return this.object(val) && Object.getOwnPropertyNames(val).length == 0;
    },

    // is a given value RegExp?
    regexp: function regexp(val) {
      return toString.call(val) === '[object RegExp]';
    },

    // is a given value String?
    string: function string(val) {
      return typeof val === 'string' || toString.call(val) === '[object String]';
    },

    // is a given value undefined?
    undefined: function undefined(val) {
      return val === void 0;
    },

    // Arithmetic checks
    /* -------------------------------------------------------------------------- */
    // is a given value numeric?
    numeric: function numeric(n) {
      return (this.number(n) || this.string(n)) && !this.nan(n - parseFloat(n));
    },

    // is a given number percentage?
    percentage: function percentage(n) {
      return typeof n === 'string' && n.indexOf('%') !== -1;
    },

    // is a given number decimal?
    decimal: function decimal(n) {
      return this.number(n) && n % 1 !== 0;
    },

    // is a given number finite?
    finite: function finite(n) {
      if (isFinite) {
        return isFinite(n);
      }
      return !this.infinite(n) && !this.nan(n);
    },

    // is a given number infinite?
    infinite: function infinite(n) {
      return n === Infinity || n === -Infinity;
    },

    integer: function integer(n) {
      return this.number(n) && n % 1 === 0;
    },

    // is a given number negative?
    negative: function negative(n) {
      return this.number(n) && n < 0;
    },

    // is a given number positive?
    positive: function positive(n) {
      return this.number(n) && n > 0;
    }
  };

  var Responsive = function () {
    function Responsive(instance) {
      classCallCheck(this, Responsive);

      this.instance = instance;
      this.initialize();
    }

    createClass(Responsive, [{
      key: 'initialize',
      value: function initialize() {
        this.index = is.number(this.instance.current[0]) ? this.instance.current[0] : 0;
        this.duration = parseInt(this.instance.options.responsiveDuration, 10);

        var options = this.instance.options;

        if (options.breakWidth === false || options.breakWidth === null) {
          return;
        }

        // init status
        this.$rely = window;
        if (options.resizeReference === 'self') {
          this.$rely = this.instance.element;
        } else if (options.resizeReference !== 'window' &&
        /* eslint no-magic-numbers: ["error", { "ignore": [0] }]*/
        dom.query(options.resizeReference).length > 0) {
          this.$rely = dom.query(options.resizeReference);
        }

        this.effects = {
          in: options.responsiveEffect,
          out: this.revertClass(options.responsiveEffect)
        };

        if (!(this.$rely.clientWidth > options.breakWidth)) {
          this.toggle(true);
        }
      }
    }, {
      key: 'revertClass',
      value: function revertClass(str) {
        var classes$$1 = str.split(' ');
        var inre = ['Up', 'Down', 'In', 'Out', 'Left', 'Right', 'Top', 'Bottom'];
        var len = classes$$1.length;
        var outre = ['Down', 'Up', 'Out', 'In', 'Right', 'Left', 'Bottom', 'Top'];
        var output = '',
            re = '',
            reNum = '';

        var reArray = [];

        for (var n = 0; n < len; n++) {
          for (var m = 0; m < inre.length; m++) {
            re = new RegExp(inre[m]);
            if (re.test(classes$$1[n])) {
              reArray.push(m);
            }
          }
          for (var l = 0; l < reArray.length; l++) {
            reNum = reArray[l];
            classes$$1[n] = classes$$1[n].replace(inre[reNum], reNum);
          }
          for (var k = 0; k < reArray.length; k++) {
            reNum = reArray[k];
            classes$$1[n] = classes$$1[n].replace(reNum, outre[reNum]);
          }
          output += ' ' + classes$$1[n];
        }
        return output.trim();
      }
    }, {
      key: 'initDistance',
      value: function initDistance() {
        var direction = this.instance.options.horizontal ? 'width' : 'height';
        this.instance.$panes.map(styled.setStyle(defineProperty({
          transform: 'translateY(-50%)',
          opacity: '0'
        }, direction, 'auto')));
        // console.log(this.instance.$panes)
        // console.log(this.instance.$contentInners)
        this.instance.$contentInners.map(styled.setStyle(defineProperty({}, direction, 'auto')));

        styled.setStyle({ height: styled.outerHeight(this.instance.$contentInners[this.index]) + 'px' }, this.instance.element);
      }
    }, {
      key: 'toggle',
      value: function toggle(toBuild) {
        if (toBuild) {
          this.build();
        } else {
          this.destroy();
        }
      }
    }, {
      key: 'build',
      value: function build() {
        var _this = this,
            _$dropdownList;

        if (this.instance.is('built')) {
          return;
        }

        this.initDistance();

        var classes$$1 = this.instance.classes;
        var options = this.instance.options;

        this.$dropdown = dom.parseHTML('<div class="' + classes$$1.DROPDOWN + '"></div>');
        this.$dropdownlabel = compose(dom.append(this.instance.$headers[this.instance.current[0]].innerHTML), dom.empty, classes.addClass(classes$$1.DROPDOWNLABEL), dom.parseHTML)(options.dropdownLabelTpl);
        this.$dropdownList = dom.parseHTML('<ul class="' + classes$$1.DROPDOWNLIST + '"></ul>');
        this.$dropdownItems = Array.from(Array(this.instance.size), function (_, index) {
          var $li = dom.parseHTML('<li>' + _this.instance.$headers[index].innerHTML + '</li>');
          if (index === _this.instance.current[0]) {
            classes.addClass(classes$$1.ACTIVE, $li);
          }
          return $li;
        });
        (_$dropdownList = this.$dropdownList).append.apply(_$dropdownList, toConsumableArray(this.$dropdownItems));
        if (this.instance.options.theme) {
          classes.addClass(this.instance.getThemeClass(), this.$dropdown);
        }
        var insertBeforeInstanceElement = function insertBeforeInstanceElement(dropdown) {
          return compose(dom.insertBefore(dropdown), classes.addClass(classes$$1.RESPONSIVE))(_this.instance.element);
        };
        compose(insertBeforeInstanceElement, dom.append(this.$dropdownList), dom.append(this.$dropdownlabel))(this.$dropdown);

        this.bind();

        this.instance.enter('built');

        if (this.instance.is('initialized')) {
          this.instance.open(this.instance.current[0], false);
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        if (!this.instance.is('built')) {
          return;
        }

        this.$dropdown.map(dom.remove);
        this.instance.$panes.map(dom.removeAttribute('style'));
        compose(classes.removeClass(this.instance.classes.RESPONSIVE), dom.removeAttribute('style'))(this.instance.element);

        this.unbind();

        this.instance.leave('built');
        for (var i = 0; i < this.instance.$panes.length; i++) {
          this.instance.close(i, false);
        }

        this.instance.open(this.index, false);
      }
    }, {
      key: 'bind',
      value: function bind() {
        var _this2 = this;

        this.dropdown = new Hammer(this.$dropdown);
        this.dropdown.on('tap', function (e) {
          if (_this2.instance.is('disabled')) {
            return;
          }
          var target = e.target;

          var matchTagName = function matchTagName(tagName) {
            return function (el) {
              return el.tagName === tagName;
            };
          };
          var aTag = target.tagName === 'A' ? target : dom.parentWith(matchTagName('A'), target);
          var liTag = target.tagName === 'LI' ? target : dom.parentWith(matchTagName('LI'), target);
          if (aTag) {
            _this2.switch();
          } else if (liTag) {
            _this2.labelActive(dom.children(dom.parent(liTag)).indexOf(liTag));
          }
        });
      }
    }, {
      key: 'unbind',
      value: function unbind() {
        this.dropdown.destroy();
      }
    }, {
      key: 'switch',
      value: function _switch() {
        classes.toggleClass(this.instance.classes.DROPDOWNOPEN, this.$dropdown);
      }
    }, {
      key: 'labelActive',
      value: function labelActive(index) {
        this.index = index;
        if (this.instance.current.indexOf(index) !== -1) {
          classes.removeClass(this.instance.classes.DROPDOWNOPEN, this.$dropdown);
          return;
        }

        this.instance.toggle(index);

        classes.removeClass(this.instance.classes.ACTIVE, this.$dropdownItems[this.instance.prev[0]]);
        classes.addClass(this.instance.classes.ACTIVE, this.$dropdownItems[index]);
        dom.html(this.$dropdownItems[index].innerHTML, this.$dropdownlabel);
        classes.removeClass(this.instance.classes.DROPDOWNOPEN, this.$dropdown);
      }
    }, {
      key: 'open',
      value: function open(index, trigger) {
        var _this3 = this;

        this.index = index;

        var $pane = this.instance.$panes[index];

        anime({
          targets: $pane,
          translateY: 0,
          opacity: 1,
          duration: trigger ? this.duration : 1,
          easing: this.effects.in,
          begin: function begin() {
            classes.addClass(_this3.instance.classes.ACTIVE, $pane);
          }
        });

        this.resetHeight(!trigger);
      }
    }, {
      key: 'close',
      value: function close(index, trigger) {
        var _this4 = this;

        var pane = this.instance.$panes[this.instance.prev[0]];
        // console.log(this.instance.prev)
        anime({
          targets: pane,
          translateY: '50%',
          opacity: 0,
          duration: trigger ? this.duration : 1,
          easing: this.effects.out,
          complete: function complete() {
            return compose(styled.setStyle({ transform: 'translateY(-50%)' }), classes.removeClass(_this4.instance.classes.ACTIVE))(pane);
          }
        });
      }
    }, {
      key: 'resetHeight',
      value: function resetHeight() {
        var immediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (!this.instance.is('built')) {
          return;
        }

        var innerHeight = styled.outerHeight(this.instance.$contentInners[this.index]);
        if (immediately) {
          styled.setStyle({ height: innerHeight + 'px' }, this.instance.element);
        } else {
          anime({
            targets: this.instance.element,
            height: innerHeight,
            duration: this.duration,
            easing: 'linear'
          });
        }
      }
    }, {
      key: 'resize',
      value: function resize() {
        var breakWidth = this.instance.options.breakWidth;

        if (breakWidth === false || breakWidth === null) {
          return;
        }

        if (this.$rely.width() > breakWidth) {
          this.toggle(false);
        } else {
          this.resetHeight(true);
          this.toggle(true);
        }
      }
    }]);
    return Responsive;
  }();

  var _dec, _dec2, _dec3, _dec4, _dec5, _class;

  var Accordion = (_dec = Pj.themeable(), _dec2 = Pj.styleable(classes$1), _dec3 = Pj.eventable(events$1), _dec4 = Pj.stateable(), _dec5 = Pj.register(namespace, {
    defaults: defaults$1,
    methods: methods,
    dependencies: dependencies
  }, info), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = function (_Component) {
    inherits(Accordion, _Component);

    function Accordion(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      classCallCheck(this, Accordion);

      var _this = possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this, namespace, element));

      _this.options = deepMerge(defaults$1, options, _this.getDataOptions());

      _this.initClasses(classes$1);
      _this.initStates();
      _this.initialize();
      return _this;
    }

    createClass(Accordion, [{
      key: 'initialize',
      value: function initialize() {
        this.initPointer();
        this.processHtml();

        this.ANIMATE = new Animate(this);
        this.RESPONSIVE = new Responsive(this);

        this.bind();
        this.open(this.current, false);

        this.enter('initialized');
        this.trigger(events$1.READY);
      }
    }, {
      key: 'initPointer',
      value: function initPointer() {
        this.$panes = dom.children(this.element);
        this.$headers = this.$panes.map(dom.find('.' + this.classes.PANEHEADER));
        this.$contents = this.$panes.map(dom.find('.' + this.classes.PANECONTENT));
        this.$contentInners = this.$contents.map(dom.find('.' + this.classes.PANECONTENTINNER));

        this.size = this.$panes.length;
        this.isResponsive = this.options.breakWidth === null ? false : Pj__default.windowWidth <= this.options.breakWidth;

        this.resetData();
      }
    }, {
      key: 'resetData',
      value: function resetData() {
        var $activeItem = this.$panes.map(dom.find('.' + this.classes.ACTIVE)).filter(Boolean);
        if ($activeItem.length > 0) {
          this.current = $activeItem.map(function (_, index) {
            return index;
          });
        } else if (this.options.initialIndex) {
          this.current = this.parseIndex(this.options.initialIndex);
        } else {
          this.current = [0];
        }

        this.prev = this.current;
      }
    }, {
      key: 'processHtml',
      value: function processHtml() {
        classes.addClass(this.classes.NAMESPACE, this.element);

        if (this.options.horizontal) {
          classes.addClass(this.classes.HORIZONTAL, this.element);
        }

        if (this.options.theme) {
          classes.addClass(this.getThemeClass(), this.element);
        }
        this.$panes.map(classes.addClass(this.classes.PANE));
        this.$headers.map(classes.addClass(this.classes.PANEHEADER));
        this.$contents.map(classes.addClass(this.classes.PANECONTENT));
        this.$contentInners.map(classes.addClass(this.classes.PANECONTENTINNER));
      }
    }, {
      key: 'parseIndex',
      value: function parseIndex(index) {
        var arr = [];

        switch (typeof index === 'undefined' ? 'undefined' : _typeof(index)) {
          case 'string':
            if (index === 'all') {
              for (var i = 0; i < this.size; i++) {
                arr.push(i);
              }
            }
            break;
          case 'number':
            arr.push(index);
            break;
          case 'object':
            if (Array.isArray(index)) {
              arr = index;
            }
            break;
          case 'undefined':
            arr = [0];
            break;
          default:
            break;
        }

        if (!this.options.multiple) {
          arr = [arr[0]];
        }

        return arr;
      }
    }, {
      key: 'bind',
      value: function bind() {
        var _this2 = this;

        this.$panes.map(function (pane, index) {
          return events.bindEvent({
            type: _this2.eventName('click'),
            identity: '.' + _this2.classes.PANEHEADER,
            handler: function handler() {
              if (_this2.is('disabled')) {
                return false;
              }
              _this2.toggle(index);
              return false;
            }
          }, pane);
        });
      }
    }, {
      key: 'toggle',
      value: function toggle(index) {
        var pos = this.current.includes(index);
        this.prev = this.current;

        if (!this.options.multiple) {
          this.close(this.prev);
        }

        if (!pos) {
          if (!this.options.multiple || this.is('built') || this.options.horizontal) {
            this.current = [];
          }

          this.current.push(index);
          this.open(index);
        } else {
          this.current.splice(this.current.indexOf(index), 1);
          this.close(index);
        }
      }
    }, {
      key: 'open',
      value: function open(index) {
        var _this3 = this;

        var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (index === null) {
          return;
        }

        var arr = Array.isArray(index) ? index : [index];
        var target = this.is('built') ? this.RESPONSIVE : this.ANIMATE;
        arr.map(function (index) {
          if (!_this3.is('built')) {
            classes.addClass(_this3.classes.ACTIVE, _this3.$panes[index]);
          }
          return target.open(index, trigger);
        });

        if (this.is('initialized')) {
          this.trigger(events$1.OPEN, index);
        }
      }
    }, {
      key: 'close',
      value: function close(index) {
        var _this4 = this;

        var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (index === null) {
          return;
        }

        var arr = Array.isArray(index) ? index : [index];
        var target = this.is('built') ? this.RESPONSIVE : this.ANIMATE;
        arr.forEach(function (index) {
          target.close(index, trigger);

          if (!_this4.is('built')) {
            classes.removeClass(_this4.classes.ACTIVE, _this4.$panes[index]);
          }
        });

        if (this.is('initialized')) {
          this.trigger(events$1.CLOSE, index);
        }
      }
    }, {
      key: 'resize',
      value: function resize() {
        this.ANIMATE.resetWidth(true);
        this.RESPONSIVE.resize();
        this.trigger(events$1.RESIZE);
      }
    }]);
    return Accordion;
  }(Component)) || _class) || _class) || _class) || _class) || _class);

  exports.default = Accordion;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
