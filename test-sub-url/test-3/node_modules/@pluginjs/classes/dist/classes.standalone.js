(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/classes'] = {})));
}(this, (function (exports) { 'use strict';

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  var curry = function curry(fn) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return function () {
      for (var _len5 = arguments.length, subArgs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        subArgs[_key5] = arguments[_key5];
      }

      var currylen = fn.currylen || fn.length;
      var collect = args.concat(subArgs);
      if (collect.length >= currylen) {
        return fn.apply(undefined, toConsumableArray(collect));
      }
      return curry(fn, collect);
    };
  };

  var isElement = function isElement(el) {
    return el instanceof Element;
  };

  var curryWith = function curryWith(fn, enSureFunction) {
    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    return function () {
      for (var _len = arguments.length, subArgs = Array(_len), _key = 0; _key < _len; _key++) {
        subArgs[_key] = arguments[_key];
      }

      var index = subArgs.findIndex(enSureFunction);
      if (index >= 0) {
        var _collect = args.concat.apply(args, toConsumableArray(subArgs.slice(0, index + 1)));
        return fn.apply(undefined, toConsumableArray(_collect));
      }
      var collect = args.concat.apply(args, subArgs);
      return curryWith(fn, enSureFunction, collect);
    };
  };

  // last:: [a] -> a
  var last = function last(arr) {
    return arr.slice(-1)[0];
  };

  // init :: [a] -> [a]
  var init = function init(arr) {
    return arr.slice(0, -1);
  };

  var hasClass = curry(function (className, element) {
    return element.classList.contains(className);
  });
  var indexOfClass = curry(function (className, element) {
    return element.classList.item(className);
  });
  var addClass = curryWith(function () {
    var _element$classList;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var classes = init(args);
    var element = last(args);
    (_element$classList = element.classList).add.apply(_element$classList, toConsumableArray(classes));
    return element;
  }, isElement);
  var removeClass = curryWith(function () {
    var _element$classList2;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var classes = init(args);
    var element = last(args);
    (_element$classList2 = element.classList).remove.apply(_element$classList2, toConsumableArray(classes));
    return element;
  }, isElement);
  var toggleClass = curry(function (className, element) {
    element.classList.toggle(className);
    return element;
  });

  exports.hasClass = hasClass;
  exports.indexOfClass = indexOfClass;
  exports.addClass = addClass;
  exports.removeClass = removeClass;
  exports.toggleClass = toggleClass;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
