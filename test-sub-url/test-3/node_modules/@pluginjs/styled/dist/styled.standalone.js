(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/styled'] = {})));
}(this, (function (exports) { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  var curry = function curry(fn) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return function () {
      for (var _len5 = arguments.length, subArgs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        subArgs[_key5] = arguments[_key5];
      }

      var currylen = fn.currylen || fn.length;
      var collect = args.concat(subArgs);
      if (collect.length >= currylen) {
        return fn.apply(undefined, toConsumableArray(collect));
      }
      return curry(fn, collect);
    };
  };

  /*eslint-disable */
  /* Credit to http://is.js.org MIT */
  var toString = Object.prototype.toString;
  var is = {
    // Type checks
    /* -------------------------------------------------------------------------- */
    // is a given value Arguments?
    arguments: function _arguments(value) {
      // fallback check is for IE
      return toString.call(value) === '[object Arguments]' || value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'callee' in value;
    },

    // is a given value Array?
    array: function array(val) {
      if (Array.isArray) {
        return Array.isArray(val);
      }
      return toString.call(val) === '[object Array]';
    },

    // is a given value Boolean?
    boolean: function boolean(val) {
      return val === true || val === false || toString.call(val) === '[object Boolean]';
    },

    // is a given value Char?
    char: function char(val) {
      return this.string(val) && val.length === 1;
    },

    // is a given value Date Object?
    date: function date(value) {
      return toString.call(value) === '[object Date]';
    },

    // is a given object a DOM node?
    domNode: function domNode(object) {
      return this.object(object) && object.nodeType > 0;
    },

    // is a given value Error object?
    error: function error(val) {
      return toString.call(val) === '[object Error]';
    },

    // is a given value function?
    function: function _function(val) {
      // fallback check is for IE
      return toString.call(val) === '[object Function]' || typeof val === 'function';
    },

    // is given value a pure JSON object?
    json: function json(value) {
      return toString.call(value) === '[object Object]';
    },

    // is a given value NaN?
    nan: function nan(val) {
      // NaN is number :) Also it is the only value which does not equal itself
      return val !== val;
    },

    // is a given value null?
    null: function _null(val) {
      return val === null;
    },

    // is a given value number?
    number: function number(val) {
      return !this.nan(val) && toString.call(val) === '[object Number]';
    },

    // is a given value object?
    object: function object(val) {
      return Object(val) === val;
    },

    // is a given value empty object?
    emptyObject: function emptyObject(val) {
      return this.object(val) && Object.getOwnPropertyNames(val).length == 0;
    },

    // is a given value RegExp?
    regexp: function regexp(val) {
      return toString.call(val) === '[object RegExp]';
    },

    // is a given value String?
    string: function string(val) {
      return typeof val === 'string' || toString.call(val) === '[object String]';
    },

    // is a given value undefined?
    undefined: function undefined(val) {
      return val === void 0;
    },

    // Arithmetic checks
    /* -------------------------------------------------------------------------- */
    // is a given value numeric?
    numeric: function numeric(n) {
      return (this.number(n) || this.string(n)) && !this.nan(n - parseFloat(n));
    },

    // is a given number percentage?
    percentage: function percentage(n) {
      return typeof n === 'string' && n.indexOf('%') !== -1;
    },

    // is a given number decimal?
    decimal: function decimal(n) {
      return this.number(n) && n % 1 !== 0;
    },

    // is a given number finite?
    finite: function finite(n) {
      if (isFinite) {
        return isFinite(n);
      }
      return !this.infinite(n) && !this.nan(n);
    },

    // is a given number infinite?
    infinite: function infinite(n) {
      return n === Infinity || n === -Infinity;
    },

    integer: function integer(n) {
      return this.number(n) && n % 1 === 0;
    },

    // is a given number negative?
    negative: function negative(n) {
      return this.number(n) && n < 0;
    },

    // is a given number positive?
    positive: function positive(n) {
      return this.number(n) && n > 0;
    }
  };

  // last:: [a] -> a

  var sum = function sum(arr) {
    return arr.reduce(function (a, b) {
      return a + b;
    });
  };

  /**
   * setStyle({
   *  fontSize: '16px',
   *  display: 'flex'
   * }, element)
   */
  var setStyle = curry(function (style, el) {
    Object.entries(style).forEach(function (_ref) {
      var _ref2 = slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];

      if (typeof v === 'number') {
        v = v.toString() + 'px';
      }
      el.style[k] = v;
    });
    return el;
  });

  var outerHeight = function outerHeight(el) {
    return el.offsetHeight;
  };

  var outerHeightWithMargin = function outerHeightWithMargin(el) {
    var height = outerHeight(el);

    var _window$getComputedSt = window.getComputedStyle(el),
        marginTop = _window$getComputedSt.marginTop,
        marginBottom = _window$getComputedSt.marginBottom;

    return sum([marginTop, marginBottom].map(function (i) {
      return parseInt(i, 10);
    }).concat(height));
  };

  var outerWidth = function outerWidth(el) {
    return el.offsetWidth;
  };

  var outerWidthWithMargin = function outerWidthWithMargin(el) {
    var width = outerWidth(el);

    var _window$getComputedSt2 = window.getComputedStyle(el),
        marginLeft = _window$getComputedSt2.marginLeft,
        marginRight = _window$getComputedSt2.marginRight;

    return sum([marginLeft, marginRight].map(function (i) {
      return parseInt(i, 10);
    }).concat(width));
  };

  var getStyle = curry(function (attr, el) {
    return (
      // let value = ''
      // const style = el.style

      // if (style) {
      //   value = style[attr]

      //   if (value === '') {
      //     // fix value is 'auto'
      //     const win = el.ownerDocument.defaultView
      //     value = win.getComputedStyle(el, null)[attr]
      //   }
      // }

      window.getComputedStyle(el)[attr]
    );
  });

  var clientHeight = function clientHeight(el) {
    return el.clientHeight;
  };

  var clientWidth = function clientWidth(el) {
    return el.clientWidth;
  };

  var contentWidth = function contentWidth(el) {
    var _window$getComputedSt3 = window.getComputedStyle(el),
        paddingLeft = _window$getComputedSt3.paddingLeft,
        paddingRight = _window$getComputedSt3.paddingRight,
        width = _window$getComputedSt3.width;

    return parseInt(width, 10) - sum([paddingLeft, paddingRight].map(function (i) {
      return parseInt(i, 10);
    }));
  };

  var contentHeight = function contentHeight(el) {
    var _window$getComputedSt4 = window.getComputedStyle(el),
        paddingTop = _window$getComputedSt4.paddingTop,
        paddingBottom = _window$getComputedSt4.paddingBottom,
        height = _window$getComputedSt4.height;

    return parseInt(height, 10) - sum([paddingTop, paddingBottom].map(function (i) {
      return parseInt(i, 10);
    }));
  };

  var offset = function offset(el) {
    var box = el.getBoundingClientRect();

    return {
      top: box.top + window.pageYOffset - document.documentElement.clientTop,
      left: box.left + window.pageXOffset - document.documentElement.clientLeft
    };
  };

  var getOffset = function getOffset(el) {
    var box = el.getBoundingClientRect();

    return {
      top: box.top + window.pageYOffset - document.documentElement.clientTop,
      left: box.left + window.pageXOffset - document.documentElement.clientLeft
    };
  };

  var css = function css(el, attr) {
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (value) {
      var mergedStyleObj = {};
      mergedStyleObj[attr] = value;

      return setStyle(mergedStyleObj, el);
    } else if (is.object(attr)) {
      return setStyle(attr, el);
    }
    return getStyle(attr, el);
  };

  var hideElement = function hideElement(el) {
    if (el.style.display === 'none') {
      return el;
    }

    if (el.style.display) {
      el.__originDisplay = el.style.display;
    }

    el.style.display = 'none';
    return el;
  };

  var showElement = function showElement(el) {
    if (el.__originDisplay) {
      el.style.display = el.__originDisplay;
      delete el.__originDisplay;
      return el;
    }
    el.style.display = '';
    return el;
  };

  exports.setStyle = setStyle;
  exports.outerHeight = outerHeight;
  exports.outerHeightWithMargin = outerHeightWithMargin;
  exports.outerWidth = outerWidth;
  exports.outerWidthWithMargin = outerWidthWithMargin;
  exports.getStyle = getStyle;
  exports.clientHeight = clientHeight;
  exports.clientWidth = clientWidth;
  exports.contentWidth = contentWidth;
  exports.contentHeight = contentHeight;
  exports.offset = offset;
  exports.getOffset = getOffset;
  exports.css = css;
  exports.hideElement = hideElement;
  exports.showElement = showElement;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
