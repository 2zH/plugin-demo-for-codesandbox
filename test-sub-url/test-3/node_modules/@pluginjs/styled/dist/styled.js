(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/utils'), require('@pluginjs/is')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/utils', '@pluginjs/is'], factory) :
  (factory((global['@pluginjs/styled'] = {}),global['@pluginjs/utils'],global['@pluginjs/is']));
}(this, (function (exports,utils,is) { 'use strict';

  is = is && is.hasOwnProperty('default') ? is['default'] : is;

  // last:: [a] -> a

  var sum = function sum(arr) {
    return arr.reduce(function (a, b) {
      return a + b;
    });
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  /**
   * setStyle({
   *  fontSize: '16px',
   *  display: 'flex'
   * }, element)
   */
  var setStyle = utils.curry(function (style, el) {
    Object.entries(style).forEach(function (_ref) {
      var _ref2 = slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];

      if (typeof v === 'number') {
        v = v.toString() + 'px';
      }
      el.style[k] = v;
    });
    return el;
  });

  var outerHeight = function outerHeight(el) {
    return el.offsetHeight;
  };

  var outerHeightWithMargin = function outerHeightWithMargin(el) {
    var height = outerHeight(el);

    var _window$getComputedSt = window.getComputedStyle(el),
        marginTop = _window$getComputedSt.marginTop,
        marginBottom = _window$getComputedSt.marginBottom;

    return sum([marginTop, marginBottom].map(function (i) {
      return parseInt(i, 10);
    }).concat(height));
  };

  var outerWidth = function outerWidth(el) {
    return el.offsetWidth;
  };

  var outerWidthWithMargin = function outerWidthWithMargin(el) {
    var width = outerWidth(el);

    var _window$getComputedSt2 = window.getComputedStyle(el),
        marginLeft = _window$getComputedSt2.marginLeft,
        marginRight = _window$getComputedSt2.marginRight;

    return sum([marginLeft, marginRight].map(function (i) {
      return parseInt(i, 10);
    }).concat(width));
  };

  var getStyle = utils.curry(function (attr, el) {
    return (
      // let value = ''
      // const style = el.style

      // if (style) {
      //   value = style[attr]

      //   if (value === '') {
      //     // fix value is 'auto'
      //     const win = el.ownerDocument.defaultView
      //     value = win.getComputedStyle(el, null)[attr]
      //   }
      // }

      window.getComputedStyle(el)[attr]
    );
  });

  var clientHeight = function clientHeight(el) {
    return el.clientHeight;
  };

  var clientWidth = function clientWidth(el) {
    return el.clientWidth;
  };

  var contentWidth = function contentWidth(el) {
    var _window$getComputedSt3 = window.getComputedStyle(el),
        paddingLeft = _window$getComputedSt3.paddingLeft,
        paddingRight = _window$getComputedSt3.paddingRight,
        width = _window$getComputedSt3.width;

    return parseInt(width, 10) - sum([paddingLeft, paddingRight].map(function (i) {
      return parseInt(i, 10);
    }));
  };

  var contentHeight = function contentHeight(el) {
    var _window$getComputedSt4 = window.getComputedStyle(el),
        paddingTop = _window$getComputedSt4.paddingTop,
        paddingBottom = _window$getComputedSt4.paddingBottom,
        height = _window$getComputedSt4.height;

    return parseInt(height, 10) - sum([paddingTop, paddingBottom].map(function (i) {
      return parseInt(i, 10);
    }));
  };

  var offset = function offset(el) {
    var box = el.getBoundingClientRect();

    return {
      top: box.top + window.pageYOffset - document.documentElement.clientTop,
      left: box.left + window.pageXOffset - document.documentElement.clientLeft
    };
  };

  var getOffset = function getOffset(el) {
    var box = el.getBoundingClientRect();

    return {
      top: box.top + window.pageYOffset - document.documentElement.clientTop,
      left: box.left + window.pageXOffset - document.documentElement.clientLeft
    };
  };

  var css = function css(el, attr) {
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (value) {
      var mergedStyleObj = {};
      mergedStyleObj[attr] = value;

      return setStyle(mergedStyleObj, el);
    } else if (is.object(attr)) {
      return setStyle(attr, el);
    }
    return getStyle(attr, el);
  };

  var hideElement = function hideElement(el) {
    if (el.style.display === 'none') {
      return el;
    }

    if (el.style.display) {
      el.__originDisplay = el.style.display;
    }

    el.style.display = 'none';
    return el;
  };

  var showElement = function showElement(el) {
    if (el.__originDisplay) {
      el.style.display = el.__originDisplay;
      delete el.__originDisplay;
      return el;
    }
    el.style.display = '';
    return el;
  };

  exports.setStyle = setStyle;
  exports.outerHeight = outerHeight;
  exports.outerHeightWithMargin = outerHeightWithMargin;
  exports.outerWidth = outerWidth;
  exports.outerWidthWithMargin = outerWidthWithMargin;
  exports.getStyle = getStyle;
  exports.clientHeight = clientHeight;
  exports.clientWidth = clientWidth;
  exports.contentWidth = contentWidth;
  exports.contentHeight = contentHeight;
  exports.offset = offset;
  exports.getOffset = getOffset;
  exports.css = css;
  exports.hideElement = hideElement;
  exports.showElement = showElement;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
