(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/emitter'] = {})));
}(this, (function (exports) { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Emitter = function () {
    function Emitter() {
      classCallCheck(this, Emitter);

      this.listeners = {};
      this.sortedListeners = {};
    }

    createClass(Emitter, [{
      key: 'emit',
      value: function emit(event) {
        var listeners = this.getListeners(event);

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        for (var i = 0; i < listeners.length; i++) {
          var context = null;

          if (listeners[i].context !== null) {
            context = listeners[i].context;
          } else {
            context = { type: event };
          }

          var result = listeners[i].listener.apply(context, args);

          if (result === false) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: 'on',
      value: function on(event, listener, context, priority) {
        return this.addListener(event, listener, context, priority);
      }
    }, {
      key: 'once',
      value: function once(event, listener, context, priority) {
        return this.addOneTimeListener(event, listener, context, priority);
      }
    }, {
      key: 'off',
      value: function off(event, listener) {
        if (typeof listener === 'undefined') {
          return this.removeAllListeners(event);
        }

        return this.removeListener(event, listener);
      }

      /* Lower numbers correspond with earlier execution,
      /* and functions with the same priority are executed
      /* in the order in which they were added to the action. */

    }, {
      key: 'addListener',
      value: function addListener(event, listener) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;

        this.ensureListener(listener);

        if (!this.listeners[event]) {
          this.listeners[event] = {};
        }
        if (!this.listeners[event][priority]) {
          this.listeners[event][priority] = [];
        }

        this.listeners[event][priority].push({
          context: context,
          listener: listener
        });
        this.clearSortedListeners(event);

        return this;
      }
    }, {
      key: 'addOneTimeListener',
      value: function addOneTimeListener(event, listener, context) {
        var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;

        var that = this;
        function wrapper() {
          that.removeListener(event, wrapper);

          return listener.apply(undefined, arguments);
        }

        this.addListener(event, wrapper, context, priority);

        return this;
      }
    }, {
      key: 'removeListener',
      value: function removeListener(event, listener) {
        this.clearSortedListeners(event);
        var listeners = this.hasListeners(event) ? this.listeners[event] : [];

        for (var priority in listeners) {
          if (Object.prototype.hasOwnProperty.call(listeners, priority)) {
            listeners[priority] = listeners[priority].filter(function (value) {
              return value.listener !== listener;
            });

            if (listeners[priority].length === 0) {
              delete listeners[priority];
            }
          }
        }

        this.listeners[event] = listeners;

        return this;
      }
    }, {
      key: 'removeAllListeners',
      value: function removeAllListeners(event) {
        this.clearSortedListeners(event);

        if (this.hasListeners(event)) {
          delete this.listeners[event];
        }

        return this;
      }
    }, {
      key: 'ensureListener',
      value: function ensureListener(listener) {
        var type = typeof listener === 'undefined' ? 'undefined' : _typeof(listener);
        if (type === 'function') {
          return listener;
        }
        throw new TypeError('Listeners should be function or closure. Received type: ' + type);
      }
    }, {
      key: 'hasListeners',
      value: function hasListeners(event) {
        if (!this.listeners[event] || Object.keys(this.listeners[event]).length === 0) {
          return false;
        }

        return true;
      }
    }, {
      key: 'getListeners',
      value: function getListeners(event) {
        if (!this.sortedListeners.hasOwnProperty(event)) {
          this.sortedListeners[event] = this.getSortedListeners(event);
        }

        return this.sortedListeners[event];
      }
    }, {
      key: 'getSortedListeners',
      value: function getSortedListeners(event) {
        if (!this.hasListeners(event)) {
          return [];
        }

        var listeners = this.listeners[event];

        var priorities = Object.keys(listeners);
        priorities.sort(function (a, b) {
          return a - b;
        });

        var sortedlisteners = [];
        for (var i = 0; i < priorities.length; i++) {
          sortedlisteners = sortedlisteners.concat(listeners[priorities[i]]);
        }

        return sortedlisteners;
      }
    }, {
      key: 'clearSortedListeners',
      value: function clearSortedListeners(event) {
        delete this.sortedListeners[event];
      }
    }]);
    return Emitter;
  }();

  exports.default = Emitter;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
