(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/dom'), require('@pluginjs/utils')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/dom', '@pluginjs/utils'], factory) :
  (factory((global['@pluginjs/events'] = {}),global['@pluginjs/dom'],global['@pluginjs/utils']));
}(this, (function (exports,dom,utils) { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var outputIdentity = function outputIdentity(identity) {
    if (!identity) {
      return { type: 'self', value: '' };
    }
    if (typeof identity === 'string') {
      return { type: 'selector', value: identity };
    }

    return identity;
  };

  var tupleToStyleSelector = function tupleToStyleSelector(tuple, prefix) {
    if (typeof tuple === 'string') {
      return tuple;
    }
    return Object.entries(tuple).map(function (kv) {
      return '[' + prefix + kv.join('=') + ']';
    }).join('');
  };

  var dispatch = function dispatch(event) {
    var target = event.target,
        currentTarget = event.currentTarget;

    var eventStorage = EventStorage.getEventStorage(currentTarget);
    var eventName = event.type;

    var attrVerify = {
      self: function self(node) {
        return node === currentTarget;
      },
      class: function _class(node, value) {
        return node.matches('.' + value);
      },
      selector: function selector(node, value) {
        return node.matches(value);
      },
      id: function id(node, value) {
        return node.matches('#' + value);
      },
      tagName: function tagName(node, value) {
        return node.matches(value);
      },
      dom: function dom$$1(node, value) {
        return node === value;
      },
      dataset: function dataset(node, value) {
        return node.matches(tupleToStyleSelector(value, 'data-'));
      },
      attribute: function attribute(node, value) {
        return node.matches(tupleToStyleSelector(value));
      },
      func: function func(node, value) {
        return Boolean(value(node));
      }
    };

    var nodeTreeCheck = function nodeTreeCheck(node) {
      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!currentTarget.contains(node)) {
        return result;
      }

      var matchEventList = eventStorage.listeners[eventName].filter(function (_ref) {
        var identity = _ref.identity;
        var type = identity.type,
            value = identity.value;

        var identityMapper = attrVerify[type];
        if (identityMapper && identityMapper(node, value)) {
          return true;
        }
        return false;
      });
      return nodeTreeCheck(dom.parent(node), result.concat(matchEventList));
    };
    // nodeTreeCheck(target).map(e => console.log(e.handler.toString()))
    nodeTreeCheck(target).reduce(function (result, _ref2) {
      var handler = _ref2.handler;
      return result !== false && handler(event);
    }, true);
  };

  var EventStorage = function () {
    function EventStorage(element) {
      classCallCheck(this, EventStorage);

      this.element = element;
      this.listeners = {};
    }

    createClass(EventStorage, [{
      key: 'on',
      value: function on(_ref3) {
        var identity = _ref3.identity,
            handler = _ref3.handler,
            eventName = _ref3.eventName,
            namespace = _ref3.namespace;

        this.ensureHandler(handler);

        if (!this.hasListeners(eventName)) {
          this.createEventListener(eventName);
        }

        if (this.checkRepeats(eventName, handler)) {
          return;
        }

        this.listeners[eventName].push({ identity: identity, handler: handler, namespace: namespace });
      }
    }, {
      key: 'once',
      value: function once(_ref4) {
        var _this = this;

        var identity = _ref4.identity,
            handler = _ref4.handler,
            eventName = _ref4.eventName,
            namespace = _ref4.namespace;

        this.ensureHandler(handler);

        if (!this.hasListeners(eventName)) {
          this.createEventListener(eventName);
        }

        var callback = function callback(event) {
          _this.removeListener(eventName, callback);

          return handler(event);
        };

        this.listeners[eventName].push({ identity: identity, handler: callback, namespace: namespace });
      }
    }, {
      key: 'off',
      value: function off(_eventName, handler) {
        if (typeof handler === 'undefined') {
          return this.removeAllListeners(_eventName);
        }
        return this.removeListener(_eventName, handler);
      }
    }, {
      key: 'trigger',
      value: function trigger(eventName, data) {
        var event = new CustomEvent(eventName, {
          detail: data
        });
        this.element.dispatchEvent(event);
      }
    }, {
      key: 'clear',
      value: function clear() {
        var _this2 = this;

        Object.entries(this.listeners).map(function (_ref5) {
          var _ref6 = slicedToArray(_ref5, 2),
              key = _ref6[0],
              value = _ref6[1];

          _this2.deleteEventListener(key);
        });

        this.listener = {};
      }
    }, {
      key: 'removeListener',
      value: function removeListener(_eventName, handler) {
        var _this3 = this;

        var _eventName$split = _eventName.split('.'),
            _eventName$split2 = slicedToArray(_eventName$split, 2),
            eventName = _eventName$split2[0],
            namespace = _eventName$split2[1];
        //   .example  || click  || click.example


        if (!eventName && namespace) {
          Object.entries(this.listeners).map(function (_ref7) {
            var _ref8 = slicedToArray(_ref7, 2),
                key = _ref8[0],
                value = _ref8[1];

            _this3.listeners[key] = _this3.listeners[key].filter(function (eventTuple) {
              return eventTuple.handler !== handler || eventTuple.namespace !== namespace;
            });

            if (_this3.listeners[key].length === 0) {
              _this3.deleteEventListener(key);
            }
          });
        } else if (eventName && !namespace) {
          // console.log('eventName')
          this.listeners[eventName] = this.listeners[eventName].filter(function (eventTuple) {
            return eventTuple.handler !== handler;
          });

          if (this.listeners[eventName].length === 0) {
            this.deleteEventListener(eventName);
          }
        } else if (eventName && namespace) {
          this.listeners[eventName] = this.listeners[eventName].filter(function (eventTuple) {
            return eventTuple.handler !== handler || eventTuple.namespace !== namespace;
          });

          if (this.listeners[eventName].length === 0) {
            this.deleteEventListener(eventName);
          }
        }
      }
    }, {
      key: 'removeAllListeners',
      value: function removeAllListeners(_eventName) {
        var _this4 = this;

        var _eventName$split3 = _eventName.split('.'),
            _eventName$split4 = slicedToArray(_eventName$split3, 2),
            eventName = _eventName$split4[0],
            namespace = _eventName$split4[1];
        //   .example  || click  || click.example


        if (!eventName && namespace) {
          Object.entries(this.listeners).map(function (_ref9) {
            var _ref10 = slicedToArray(_ref9, 2),
                key = _ref10[0],
                value = _ref10[1];

            _this4.listeners[key] = _this4.listeners[key].filter(function (eventTuple) {
              return eventTuple.namespace !== namespace;
            });

            if (_this4.listeners[key].length === 0) {
              _this4.deleteEventListener(key);
            }
          });
        } else if (eventName && !namespace) {
          this.deleteEventListener(eventName);
        } else if (eventName && namespace && this.listeners[eventName]) {
          this.listeners[eventName] = this.listeners[eventName].filter(function (eventTuple) {
            return eventTuple.namespace !== namespace;
          });

          if (this.listeners[eventName].length === 0) {
            this.deleteEventListener(eventName);
          }
        }

        return this;
      }
    }, {
      key: 'createEventListener',
      value: function createEventListener(eventName) {
        this.listeners[eventName] = [];
        this.element.addEventListener(eventName, dispatch, false);
      }
    }, {
      key: 'deleteEventListener',
      value: function deleteEventListener(eventName) {
        this.element.removeEventListener(eventName, dispatch);
        delete this.listeners[eventName];
      }
    }, {
      key: 'checkRepeats',
      value: function checkRepeats(eventName, handler) {
        return this.listeners[eventName].filter(function (value) {
          return value.handler === handler;
        }).length !== 0;
      }
    }, {
      key: 'hasListeners',
      value: function hasListeners(eventName) {
        if (!this.listeners[eventName] || Object.keys(this.listeners[eventName]).length === 0) {
          return false;
        }

        return true;
      }
    }, {
      key: 'ensureHandler',
      value: function ensureHandler(handler) {
        var type = typeof handler === 'undefined' ? 'undefined' : _typeof(handler);
        if (type === 'function') {
          return handler;
        }
        throw new TypeError('Listeners should be function or closure. Received type: ' + type);
      }
    }], [{
      key: 'of',
      value: function of(_ref11, element) {
        var _eventName = _ref11.type,
            identity = _ref11.identity,
            handler = _ref11.handler;

        if (!element.__eventStorage) {
          element.__eventStorage = new this(element);
        }

        var _eventName$split5 = _eventName.split('.'),
            _eventName$split6 = slicedToArray(_eventName$split5, 2),
            eventName = _eventName$split6[0],
            namespace = _eventName$split6[1];

        var eventStorage = this.getEventStorage(element);

        eventStorage.on({
          identity: outputIdentity(identity),
          handler: handler,
          eventName: eventName,
          namespace: namespace
        });
      }
    }, {
      key: 'once',
      value: function once(_ref12, element) {
        var _eventName = _ref12.type,
            identity = _ref12.identity,
            handler = _ref12.handler;

        if (!element.__eventStorage) {
          element.__eventStorage = new this(element);
        }

        var _eventName$split7 = _eventName.split('.'),
            _eventName$split8 = slicedToArray(_eventName$split7, 2),
            eventName = _eventName$split8[0],
            namespace = _eventName$split8[1];

        var eventStorage = this.getEventStorage(element);

        eventStorage.once({
          identity: outputIdentity(identity),
          handler: handler,
          eventName: eventName,
          namespace: namespace
        });
      }
    }, {
      key: 'delete',
      value: function _delete(options, element) {
        var eventStorage = this.getEventStorage(element);
        if (!eventStorage) {
          return;
        }

        var _options$type = options.type,
            _eventName = _options$type === undefined ? options : _options$type,
            handler = options.handler;

        eventStorage.off(_eventName, handler);
      }
    }, {
      key: 'getEventStorage',
      value: function getEventStorage(element) {
        return element.__eventStorage;
      }
    }]);
    return EventStorage;
  }();

  var trigger = utils.curry(function (options, el) {
    var _options$type = options.type,
        type = _options$type === undefined ? options : _options$type,
        data = options.data;

    var eventName = type;

    var eventStorage = EventStorage.getEventStorage(el);
    if (eventStorage && eventStorage.hasListeners(eventName)) {
      eventStorage.trigger(eventName, data);
    }

    return el;
  });
  /**
   * bindEvent ({
   *   type: 'example:CustomEvent',
   *   handler: event => {
   *     let { instance } = event.detail
   *   }
   * }, elemment)
   *
   * trigger({
   *   type: 'example:CustomEvent',
   *   data: {instance: this}
   * }, elemment)
   */

  var bindEvent = utils.curry(function (options, element) {
    EventStorage.of(options, element);
    return element;
  });
  /**
   * bindEvent ({
   *   type: eventName,
   *   handler
   * }, el)
   * bindEvent ({
   *   type: eventName,
   *   identity: '.className',
   *   handler
   * }, el)
   * bindEvent ({
   *   type,
   *   identity: {
   *     type: '[selector |class | id | attr | dataset]',
   *     value
   *   },
   *   handler
   * }, el)
   * example:
   * <li><a href="#" data-test="example">test</a></li>
   * bindEvent ({
   *   type,
   *   identity: {
   *     type: 'dataset',
   *     value: {test: 'example'}
   *   },
   *   handler
   * }, el)
   */
  var removeEvent = utils.curry(function (options, element) {
    EventStorage.delete(options, element);
    return element;
  });
  /**
   * removeEvent (this.eventName(), el)
   * removeEvent (eventName, el)
   * removeEvent ({
   *   type: [this.eventName() || eventName],
   *   handler
   * }, el)
   */
  var bindEventOnce = utils.curry(function (options, element) {
    EventStorage.once(options, element);
    return element;
  });

  var getEventStorage = function getEventStorage(element) {
    return EventStorage.getEventStorage(element);
  };

  exports.trigger = trigger;
  exports.bindEvent = bindEvent;
  exports.removeEvent = removeEvent;
  exports.bindEventOnce = bindEventOnce;
  exports.getEventStorage = getEventStorage;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
