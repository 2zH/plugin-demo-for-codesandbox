(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global['@pluginjs/global-plugin'] = {})));
}(this, (function (exports) { 'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var Plugin = function () {
    function Plugin(namespace, element) {
      classCallCheck(this, Plugin);

      this.plugin = namespace;
      this.element = element;
      if (window.Pj && window.Pj.instances[this.plugin]) {
        window.Pj.instances[this.plugin].push(this);
      }
    }

    createClass(Plugin, [{
      key: 'getDataOptions',
      value: function getDataOptions() {
        var _this = this;

        var data = this.element.dataset;
        var length = Object.keys(data).length;
        var newData = {};

        if (length > 0) {
          Object.entries(data).forEach(function (_ref) {
            var _ref2 = slicedToArray(_ref, 2),
                name = _ref2[0],
                content = _ref2[1];

            var cache = {};
            var items = name.split('-');
            // let items = name.split('-');

            var deep = items.length;

            if (deep > 1) {
              var buffer = {};

              for (var j = 0; j < deep; j++) {
                var item = items[j].substring(0, 1).toLowerCase() + items[j].substring(1);

                if (j === 0) {
                  buffer = {};
                  cache[item] = {};
                } else if (j === deep - 1) {
                  buffer[item] = content;
                } else {
                  buffer = {};
                  buffer[item] = {};
                }
              }
            } else if (items[0] === 'as' + _this.plugin.substring(0, 1).toUpperCase() + _this.plugin.substring(1)) {
              cache = content;
            } else {
              cache[name] = content;
            }

            Object.assign(newData, cache);
          });
        }

        return newData;
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        var _this2 = this;

        this.plugin = null;
        this.element = null;
        if (window.Pj && window.Pj.instances[this.plugin]) {
          window.Pj.instances[this.plugin] = window.Pj.instances[this.plugin].filter(function (plugin) {
            return plugin.element === _this2.element;
          });
        }
      }
    }], [{
      key: 'of',
      value: function of() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new (Function.prototype.bind.apply(this, [null].concat(args)))();
      }
    }]);
    return Plugin;
  }();

  var GlobalComponent = function (_Component) {
    inherits(GlobalComponent, _Component);

    function GlobalComponent(namespace) {
      classCallCheck(this, GlobalComponent);

      var _this = possibleConstructorReturn(this, (GlobalComponent.__proto__ || Object.getPrototypeOf(GlobalComponent)).call(this, namespace, window.Pj.doc));

      if (!window.Pj.instances[_this.plugin]) {
        return possibleConstructorReturn(_this);
      }
      _this.instanceId = window.Pj.instances[_this.plugin].length + 1;
      window.Pj.instances[_this.plugin].push(_this);
      return _this;
    }

    createClass(GlobalComponent, [{
      key: 'destroy',
      value: function destroy() {
        var _this2 = this;

        window.Pj.instances[this.plugin] = window.Pj.instances[this.plugin].filter(function (instance) {
          return instance !== _this2;
        });
        window.Pj[this.plugin] = null;
      }
    }]);
    return GlobalComponent;
  }(Plugin);

  exports.default = GlobalComponent;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
