(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/utils'), require('@pluginjs/is')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/utils', '@pluginjs/is'], factory) :
  (factory((global['@pluginjs/dom'] = {}),global['@pluginjs/utils'],global['@pluginjs/is']));
}(this, (function (exports,utils,is) { 'use strict';

  is = is && is.hasOwnProperty('default') ? is['default'] : is;

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  var objDataName = 'objData';

  var query = function query(selector) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return parent.querySelector(selector);
  };

  var queryAll = function queryAll(selector) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return Array.from(parent.querySelectorAll(selector));
  };

  var find = utils.curry(function (selector, parent) {
    return parent.querySelector(selector);
  });

  var finds = utils.curry(function (selector, parent) {
    return Array.from(parent.querySelectorAll(selector));
  });

  var remove = function remove(el) {
    return el.remove();
  };

  var html = utils.curry(function (content, el) {
    el.innerHTML = content;
    return el;
  });

  var children = function children(el) {
    return Array.from(el.children);
  };

  var childrenSelect = function childrenSelect(selector, el) {
    return Array.from(el.children).filter(function (c) {
      return c.nodeName.toLowerCase() === selector;
    });
  };

  var getSiblings = function getSiblings(el) {
    var childrenArr = children(el.parentNode);
    var index = childrenArr.indexOf(el);
    if (index > -1) {
      childrenArr.splice(index, 1);
    }
    return childrenArr;
  };

  var attrVerify = function attrVerify(attrName, value, el) {
    var Obj = {
      data: function data(element) {
        var _value$split = value.split('='),
            _value$split2 = slicedToArray(_value$split, 2),
            key = _value$split2[0],
            v = _value$split2[1];

        if (!is.null(element.dataset[key]) && !is.undefined(element.dataset[key])) {
          if (v) {
            return element.dataset[key] === v;
          }
          return true;
        }
      },
      tagName: function tagName(element) {
        return element.nodeName.toLowerCase() === value;
      },
      class: function _class(element) {
        return element.classList.contains(value);
      },
      id: function id(element) {
        return element.id === value;
      },
      attr: function attr(element) {
        var _value$split3 = value.split('='),
            _value$split4 = slicedToArray(_value$split3, 2),
            key = _value$split4[0],
            v = _value$split4[1];

        if (!is.null(element.getAttribute(key)) && !is.undefined(element.getAttribute(key))) {
          if (v) {
            return element.getAttribute(key) === v;
          }
          return true;
        }
      }
    };
    return Obj[attrName] && Obj[attrName](el);
  };

  var childQuery = function childQuery(_ref, el) {
    var type = _ref.type,
        value = _ref.value,
        _ref$level = _ref.level,
        level = _ref$level === undefined ? 3 : _ref$level;

    var res = [];

    var hasChild = function hasChild(element) {
      return Array.from(element.children).lenght !== 0;
    };

    var childNodeCompare = function childNodeCompare(element, l) {
      if (hasChild(element)) {
        Array.from(element.children).map(function (c) {
          if (attrVerify(type, value, c)) {
            res.push(c);
          }

          if (hasChild(c) && l > 0) {
            childNodeCompare(c, l - 1);
          }
        });
      }
    };

    childNodeCompare(el, level);

    return res;
  };

  var Each = function Each(obj, callback) {
    var i = 0,
        length = void 0;

    if (is.array(obj)) {
      length = obj.length;
      for (; i < length; i++) {
        callback(obj[i], i);
      }
    } else {
      Object.entries(obj).map(function (_ref2) {
        var _ref3 = slicedToArray(_ref2, 2),
            k = _ref3[0],
            v = _ref3[1];

        return callback(k, v);
      });
    }

    return obj;
  };

  var parentQuery = function parentQuery(_ref4, el) {
    var type = _ref4.type,
        value = _ref4.value,
        _ref4$level = _ref4.level,
        level = _ref4$level === undefined ? 3 : _ref4$level;

    var res = [];
    var parentCompare = function parentCompare(element) {
      if (attrVerify(type, value, element.parentNode)) {
        res.push(element.parentNode);
      }
      level--;
      if (level >= 0) {
        parentCompare(element.parentNode);
      }
    };

    parentCompare(el);
    return res;
  };

  var parent = function parent(el) {
    return el.parentNode;
  };
  // 解析 HTML/SVG/XML 字符串
  var parseHTML = function parseHTML() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var htmlString = Array.isArray(args[0]) ? args[0].reduce(function (result, str, index) {
      return result + args[index] + str;
    }) : args[0];
    var childNodes = utils.compose(children, html(htmlString))(document.createElement('div'));
    if (childNodes.length === 1) {
      return childNodes[0];
    }
    return childNodes;
  };

  var setObjData = function setObjData(name, data, el) {
    if (!el[objDataName]) {
      el[objDataName] = {};
    }

    el[objDataName][name] = data;
    return el;
  };

  var getObjData = function getObjData(name, el) {
    if (!el[objDataName]) {
      return false;
    }

    return el[objDataName][name];
  };

  var clone = function clone(el) {
    return el.cloneNode(true);
  };

  var empty = function empty(el) {
    el.innerHTML = '';
    return el;
  };

  var prev = function prev(el) {
    return el.previousElementSibling;
  };

  var next = function next(el) {
    return el.nextElementSibling;
  };

  var attr = utils.curry(function (args, el) {
    if (typeof args === 'string') {
      return el.getAttribute(args);
    }
    Object.entries(args).forEach(function (_ref5) {
      var _ref6 = slicedToArray(_ref5, 2),
          k = _ref6[0],
          v = _ref6[1];

      return el.setAttribute(k, v);
    });
    return el;
  });
  var removeAttribute = utils.curry(function (name, el) {
    return el.removeAttribute(name);
  });

  var dataset = utils.curry(function (args, el) {
    if (typeof args === 'string') {
      return el.dataset[args];
    }
    Object.entries(args).forEach(function (_ref7) {
      var _ref8 = slicedToArray(_ref7, 2),
          k = _ref8[0],
          v = _ref8[1];

      el.dataset[k] = v;
    });
    return el;
  });

  var text = utils.curry(function (content, el) {
    el.textContent = content;
    return el;
  });

  var append = utils.curry(function (child, el) {
    if (is.string(child)) {
      el.insertAdjacentHTML('beforeend', child);
    } else {
      el.append(child);
    }
    return el;
  });

  var prepend = utils.curry(function (child, el) {
    if (is.string(child)) {
      el.insertAdjacentHTML('afterbegin', child);
    } else {
      el.prepend(child);
    }
    return el;
  });

  var insertBefore = utils.curry(function (newElement, el) {
    if (is.string(newElement)) {
      el.insertAdjacentHTML('beforebegin', newElement);
    } else {
      el.insertAdjacentElement('beforebegin', newElement);
    }
    return el;
  });

  var insertAfter = utils.curry(function (newElement, el) {
    if (is.string(newElement)) {
      el.insertAdjacentHTML('afterend', newElement);
    } else {
      el.insertAdjacentElement('afterend', newElement);
    }
    return el;
  });

  var wrap = utils.curry(function (wrapElement, el) {
    if (is.string(wrapElement)) {
      wrapElement = parseHTML(wrapElement);
    }
    // compose(append(wrapElement), clone, insertBefore(wrapElement))(el)
    insertBefore(wrapElement, el);
    remove(el);
    append(el, wrapElement);
    return wrapElement;
  });

  var wrapInner = function wrapInner(newElement, wrap) {
    if (is.string(newElement)) {
      newElement = parseHTML(newElement);
    }
    newElement.innerHTML = wrap.innerHTML;
    wrap.innerHTML = '';
    wrap.append(newElement);
    return wrap;
  };

  var wrapAll = function wrapAll(wrapElement, elementList) {
    insertBefore(wrapElement, elementList[0]);
    wrapElement.append.apply(wrapElement, toConsumableArray(elementList));
    return wrapElement;
  };

  var unwrap = function unwrap(el) {
    var parentEl = parent(el);
    children(parentEl).forEach(function (child) {
      insertBefore(child, parentEl);
    });
    parentEl.remove();
    return el;
  };

  var clearChild = function clearChild(el) {
    children(el).map(remove);
    return el;
  };

  var parentWith = utils.curry(function (fn, el) {
    var parentElement = parent(el);
    if (parentElement === document) {
      return false;
    }
    if (fn(parentElement)) {
      return parentElement;
    }
    return parentWith(fn, parentElement);
  });

  var clearData = function clearData(el) {
    Object.keys(el).map(function (name) {
      return el.removeAttribute('data-' + name);
    });
    return el;
  };

  var contains = utils.curry(function (el, parent) {
    return parent.contains(el);
  });

  var closest = utils.curry(function (selector, el) {
    if (el.matches(selector)) {
      return el;
    }
    return parentWith(function (el) {
      return el.matches(selector);
    }, el);
  });

  var nextElementWith = utils.curry(function (fn, el) {
    var nextElement = next(el);
    if (fn(nextElement)) {
      return nextElement;
    }
    return nextElementWith(fn, nextElement);
  });

  // == animation == //

  var fade = utils.curry(function (type, _ref9, element) {
    var duration = _ref9.duration,
        callback = _ref9.callback;

    var isIn = type === 'in';
    var opacity = isIn ? 0 : 1;
    var start = null;

    if (isIn) {
      if (element.style.display === 'none') {
        element.style.display = 'inline';
      }
      element.style.opacity = opacity;
    }

    function step(timestamp) {
      if (!start) {
        start = timestamp;
      }
      var progress = timestamp - start;
      var percent = progress / duration;
      opacity = isIn ? opacity + percent : opacity - percent;
      element.style.opacity = opacity;

      if (opacity <= 0) {
        element.style.display = 'none';
      }

      if (progress < duration) {
        window.requestAnimationFrame(step);
      } else if (callback) {
        callback();
      }
    }

    window.requestAnimationFrame(step);
  });

  var fadeOut = fade('out');
  var fadeIn = fade('in');

  exports.query = query;
  exports.queryAll = queryAll;
  exports.find = find;
  exports.finds = finds;
  exports.remove = remove;
  exports.html = html;
  exports.children = children;
  exports.childrenSelect = childrenSelect;
  exports.getSiblings = getSiblings;
  exports.attrVerify = attrVerify;
  exports.childQuery = childQuery;
  exports.Each = Each;
  exports.parentQuery = parentQuery;
  exports.parent = parent;
  exports.parseHTML = parseHTML;
  exports.setObjData = setObjData;
  exports.getObjData = getObjData;
  exports.clone = clone;
  exports.empty = empty;
  exports.prev = prev;
  exports.next = next;
  exports.attr = attr;
  exports.removeAttribute = removeAttribute;
  exports.dataset = dataset;
  exports.text = text;
  exports.append = append;
  exports.prepend = prepend;
  exports.insertBefore = insertBefore;
  exports.insertAfter = insertAfter;
  exports.wrap = wrap;
  exports.wrapInner = wrapInner;
  exports.wrapAll = wrapAll;
  exports.unwrap = unwrap;
  exports.clearChild = clearChild;
  exports.parentWith = parentWith;
  exports.clearData = clearData;
  exports.contains = contains;
  exports.closest = closest;
  exports.nextElementWith = nextElementWith;
  exports.fade = fade;
  exports.fadeOut = fadeOut;
  exports.fadeIn = fadeIn;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
